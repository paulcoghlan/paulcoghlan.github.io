<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloud on paulcoghlan.github.io</title>
    <link>/tags/cloud/</link>
    <description>Recent content in cloud on paulcoghlan.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 15 Feb 2022 18:29:26 +0000</lastBuildDate><atom:link href="/tags/cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tips for using AWS Lambda Runtime Interface Emulator</title>
      <link>/posts/using-aws-lambda-rie/</link>
      <pubDate>Tue, 15 Feb 2022 18:29:26 +0000</pubDate>
      
      <guid>/posts/using-aws-lambda-rie/</guid>
      <description>Scenario I&amp;rsquo;ve found the AWS Lambda Runtime Interface Emulator (RIE) to be a very useful tool to help develop custom Docker images for AWS Lambdas - but I&amp;rsquo;ve not seen it mentioned much in blogs or StackOverflow, etc.
My scenario was that I needed to develop a service to read a SQS message containing a HTML link, convert the HTML to PDF, and upload the PDF to S3.
I was using wkhtmltopdf HTML to PDF convertor (basically a headless Chrome Browser), with some SQS/S3 integration glue code in Kotlin to align with the rest of the codebase.</description>
      <content>&lt;h2 id=&#34;scenario&#34;&gt;Scenario&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve found the &lt;a href=&#34;https://github.com/aws/aws-lambda-runtime-interface-emulator&#34;&gt;AWS Lambda Runtime Interface Emulator&lt;/a&gt; (RIE) to be a very useful tool to help develop custom Docker
images for AWS Lambdas - but I&amp;rsquo;ve not seen it mentioned much in blogs or StackOverflow, etc.&lt;/p&gt;
&lt;p&gt;My scenario was that I needed to develop a service to read a SQS message containing a HTML link,
convert the HTML to PDF, and upload the PDF to S3.&lt;/p&gt;
&lt;p&gt;I was using &lt;code&gt;wkhtmltopdf&lt;/code&gt; HTML to PDF convertor (basically a headless Chrome Browser), with some SQS/S3
integration glue code in Kotlin to align with the rest of the codebase.&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;/2022/convertor.png&#34;   style=&#34;width: 320px;&#34;  /&gt;
    
  &lt;/figure&gt;


&lt;h2 id=&#34;why-use-a-lambda-with-a-custom-docker-image&#34;&gt;Why use a Lambda with a custom Docker image?&lt;/h2&gt;
&lt;p&gt;The easiest option to creating an AWS Lambda is to upload a ZIP file archive containing a raw Python,
Java, etc app.  However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You might want to use a runtime that AWS doesnâ€™t currently support&lt;/li&gt;
&lt;li&gt;Or youâ€™re running 3rd-party binaries (e.g &lt;code&gt;wkhtmltopdf&lt;/code&gt; HTML-&amp;gt; PDF convertor, which
is fussy about Qt libraries)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-use-a-custom-docker-image&#34;&gt;How to use a custom Docker image&lt;/h2&gt;
&lt;p&gt;Your AWS Lambda can trigger an executable in a Docker container.  Either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base on a AWS-provided image with Runtime Interface Client (RIC) already included - see &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-images.html#runtimes-images-lp&#34;&gt;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-images.html#runtimes-images-lp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or create your own custom image, but add a &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-images.html#runtimes-api-client&#34;&gt;Runtime Image Client&lt;/a&gt; (RIC) to interface Lambda services to your function code
e.g. for a Java Gradle build, add the following dependency:&lt;br&gt;
&lt;code&gt;implementation(&amp;quot;com.amazonaws:aws-lambda-java-runtime-interface-client:1.0.0&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-develop-locally&#34;&gt;Why develop locally?&lt;/h2&gt;
&lt;p&gt;The main reason to develop images locally is that it offers a much faster development cycle - there
is no need to upload images to S3!&lt;/p&gt;
&lt;p&gt;Logging issues following on from an incorrect Docker config are often easier to debug locally because
you can change the &lt;code&gt;Dockerfile&lt;/code&gt; and see the effects almost immediately.  You can also inspect
the container itself as it is running on your local host.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-the-aws-runtime-interface-emulator-with-your-custom-image&#34;&gt;How to use the AWS Runtime Interface Emulator with your custom image&lt;/h2&gt;
&lt;p&gt;To recap: if you are using a custom Docker image you need a &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/runtimes-images.html#runtimes-api-client&#34;&gt;Runtime Image Client&lt;/a&gt; (RIC) included in the deployed application.&lt;/p&gt;
&lt;p&gt;Additionally if you are developing locally you need a &lt;a href=&#34;https://github.com/aws/aws-lambda-runtime-interface-emulator/&#34;&gt;Runtime Interface Emulator&lt;/a&gt; to expose a fake Lambda HTTP endpoint.  This RIE can be used
to trigger your function and verify that it will work as desired when it is deployed to AWS services.&lt;/p&gt;
&lt;p&gt;I always find a diagram helps in these situations.  The figure below compares the architecture of a
real AWS Lambda function running in the cloud against an emulated local one running on your PC or laptop:&lt;/p&gt;

  &lt;figure class=&#34;left&#34; &gt;
    &lt;img src=&#34;/2022/localdev.png&#34;   /&gt;
    
  &lt;/figure&gt;


&lt;p&gt;The steps are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mount AWS Runtime Interface Emulator (RIE) directory and specify com.amazonaws.services.lambda.runtime.api.client.AWSLambda entrypoint:&lt;/li&gt;
&lt;/ul&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;sh&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-sh&#34; &gt;&lt;code&gt;
# Install RIE - provides fake Lambda HTTP endpoint to trigger your function
mkdir -p ~/.aws-lambda-rie &amp;amp;&amp;amp; \
    curl -Lo ~/.aws-lambda-rie/aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie &amp;amp;&amp;amp; \
    chmod &amp;#43;x ~/.aws-lambda-rie/aws-lambda-rie   
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Run Docker image containing target function (&lt;code&gt;lambdas:latest&lt;/code&gt; in this instance):&lt;/li&gt;
&lt;/ul&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;sh&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-sh&#34; &gt;&lt;code&gt;
docker run -v ~/.aws-lambda-rie:/aws-lambda \ 
--entrypoint /aws-lambda/aws-lambda-rie -p 9000:8080 lambdas:latest /usr/bin/java \
-cp &amp;#39;.*:/opt/java/generate_pdf.jar&amp;#39; \
com.amazonaws.services.lambda.runtime.api.client.AWSLambda  lambdas.generatepdf.GeneratePDF::handleRequest
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Finally, you can invoke your Lambda function via the RIE endpoint:&lt;/li&gt;
&lt;/ul&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;sh&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-sh&#34; &gt;&lt;code&gt;
curl -XPOST &amp;#34;http://localhost:9000/2015-03-31/functions/function/invocations&amp;#34; -d &amp;#39;{}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lambdas are great - here weâ€™ve isolated a 3rd party binary from the rest of our application infrastructure ðŸš€&lt;/li&gt;
&lt;li&gt;The AWS RIE framework is useful if you have Lambda config issues&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-tips&#34;&gt;Some tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Watch out for Dockerfile ENTRYPOINT vs CMD! ðŸ¦¶ðŸ”« - see &lt;a href=&#34;http://aws.amazon.com/blogs/opensource/demystifying-entrypoint-cmd-docker/&#34;&gt;http://aws.amazon.com/blogs/opensource/demystifying-entrypoint-cmd-docker/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can quickly check that how your environment variables are setup from:&lt;/li&gt;
&lt;/ul&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;sh&lt;/span&gt;
      
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-sh&#34; &gt;&lt;code&gt;
docker inspect --format=&amp;#39;{{range .Config.Env}}{{println .}}{{end}}&amp;#39; &amp;lt;image&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


</content>
    </item>
    
  </channel>
</rss>
